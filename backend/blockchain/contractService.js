const { ethers } = require("ethers");
const fs = require("fs");
const path = require("path");

// Load ABI generated by Hardhat after compile
const abiPath = path.join(__dirname, "abi.json");
const abi = JSON.parse(fs.readFileSync(abiPath, "utf8"));

// Connect to Sepolia provider (Infura, Alchemy, etc)
const provider = new ethers.providers.JsonRpcProvider(process.env.SEPOLIA_RPC_URL);

// Setup wallet signer using private key from .env
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

(async () => {
  try {
    const address = await wallet.getAddress();
    console.log("üßæ Backend wallet address:", address);
  } catch (error) {
    console.error("‚ùå Wallet connection error:", error);
  }
})();

// Replace with your deployed contract address (update after deployment)
const contractAddress = "0x4151d4aFbA58e638A78d17d9587b194524eBEAC1";

const contract = new ethers.Contract(contractAddress, abi, wallet);

// Adds candidate on blockchain, returns blockchain ID
async function addCandidate(name, electionId) {
  const tx = await contract.addCandidate(name, electionId);
  await tx.wait();

  const candidates = await contract.getCandidatesByElection(electionId);
  if (candidates.length === 0) throw new Error("Candidate not found after add");

  const added = candidates[candidates.length - 1];
  return added.id.toNumber();
}

module.exports = {
  addCandidate,
  wallet,
  contract,
};
